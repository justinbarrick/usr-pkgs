secrets = [
    "S3_ACCESS_KEY",
    "S3_SECRET_KEY",
    "DOCKER_USER",
    "DOCKER_PASS",
    "GITHUB_TOKEN"
]

env = [
    "POLYBAR_VERSION=3.3.0-1",
    "PACAUR_VERSION=4.7.90-1",
    "COWER_VERSION=18-1",
    "TERMSYN_VERSION=1.8.7-1",
    "FONT_AWESOME_VERSION=4.7.0-5",
    "MATERIAL_DESIGN_VERSION=3.0.1-1",
    "UNIFONT_VERSION=11.0.03-1",
    "S3_ACCESS_KEY",
    "S3_SECRET_KEY",
    "S3_ENDPOINT=sfo2.digitaloceanspaces.com",
    "S3_BUCKET=codesink-cache",
    "S3_ENABLED=false",
    "DOCKER_USER",
    "DOCKER_PASS",
    "VAULT_ADDR",
    "VAULT_TOKEN",
    "GITHUB_TOKEN"
]

vault {
    address = "${environ.VAULT_ADDR}"
    token = "${environ.VAULT_TOKEN}"
}

cache {
    s3 {
        access_key = "${environ.S3_ACCESS_KEY}"
        secret_key = "${environ.S3_SECRET_KEY}"
        endpoint = "${environ.S3_ENDPOINT}"
        bucket = "${environ.S3_BUCKET}"
        disabled = "${environ.S3_ENABLED != "true"}"
    }
}

template "default" {
    image = "justinbarrick/arch-builder:builder"
    shell = "makepkg -s -f --noconfirm"
}

job "builder" {
    image = "justinbarrick/kaniko:latest"

    env = {
        "DOCKER_USER" = "${environ.DOCKER_USER}",
        "DOCKER_PASS" = "${environ.DOCKER_PASS}",
    }

    inputs = ["builder/Dockerfile"]

    shell = <<EOF
kaniko --dockerfile=builder/Dockerfile --context=/build/builder/ \
    --destination=${environ.DOCKER_USER}/arch-builder:builder
EOF
}

job "polybar" {
    deps = ["builder"]

    inputs = [
        "pkgs/polybar/PKGBUILD", "pkgs/polybar/polybar.install"
    ]
    outputs = [
        "pkgs/polybar/polybar-${environ.POLYBAR_VERSION}-x86_64.pkg.tar.xz"
    ]

    shell = <<EOF
sudo pacman -S --noconfirm curl alsa-lib pulseaudio i3-wm jsoncpp 
makepkg -f -s --noconfirm
EOF

    workdir = "pkgs/polybar"
}

job "cower" {
    deps = ["builder"]

    inputs = ["pkgs/cower/PKGBUILD"]
    outputs = [
        "pkgs/cower/cower-${environ.COWER_VERSION}-x86_64.pkg.tar.xz"
    ]

    workdir = "pkgs/cower"
}

job "pacaur" {
    deps = ["builder", "cower"]

    inputs = [
        "pkgs/pacaur/PKGBUILD",
        "pkgs/cower/cower-${environ.COWER_VERSION}-x86_64.pkg.tar.xz"
    ]
    outputs = [
        "pkgs/pacaur/pacaur-${environ.PACAUR_VERSION}-any.pkg.tar.xz"
    ]

    workdir = "pkgs/pacaur"

    shell = <<EOF
sudo pacman -U --noconfirm ../cower/cower-${environ.COWER_VERSION}-x86_64.pkg.tar.xz
makepkg -f -s --noconfirm
EOF
}

job "termsyn-font" {
    deps = ["builder"]

    inputs = [
        "pkgs/termsyn-font/PKGBUILD",
        "pkgs/termsyn-font/termsyn-font.install",
    ]
    outputs = [
        "pkgs/termsyn-font/termsyn-font-${environ.TERMSYN_VERSION}-any.pkg.tar.xz"
    ]

    workdir = "pkgs/termsyn-font"
}

job "ttf-font-awesome-4" {
    deps = ["builder"]

    inputs = [
        "pkgs/ttf-font-awesome-4/PKGBUILD",
        "pkgs/ttf-font-awesome-4/OFL"
    ]
    outputs = [
        "pkgs/ttf-font-awesome-4/ttf-font-awesome-4-${environ.FONT_AWESOME_VERSION}-any.pkg.tar.xz"
    ]

    workdir = "pkgs/ttf-font-awesome-4"
}

job "ttf-material-design-icons" {
    deps = ["builder"]

    inputs = ["pkgs/ttf-material-design-icons/PKGBUILD"]
    outputs = [
        "pkgs/ttf-material-design-icons/ttf-material-design-icons-${environ.MATERIAL_DESIGN_VERSION}-any.pkg.tar.xz"
    ]

    workdir = "pkgs/ttf-material-design-icons"
}

job "ttf-unifont" {
    deps = ["builder"]

    inputs = ["pkgs/ttf-unifont/PKGBUILD"]
    outputs = [
        "pkgs/ttf-unifont/ttf-unifont-${environ.UNIFONT_VERSION}-any.pkg.tar.xz"
    ]

    workdir = "pkgs/ttf-unifont"
}

job "repo" {
    deps = [
        "polybar", "cower", "pacaur", "termsyn-font", "ttf-font-awesome-4",
        "ttf-material-design-icons", "ttf-unifont"
    ]

    inputs = [
        "pkgs/polybar/polybar-${environ.POLYBAR_VERSION}-x86_64.pkg.tar.xz",
        "pkgs/cower/cower-${environ.COWER_VERSION}-x86_64.pkg.tar.xz",
        "pkgs/pacaur/pacaur-${environ.PACAUR_VERSION}-any.pkg.tar.xz",
        "pkgs/termsyn-font/termsyn-font-${environ.TERMSYN_VERSION}-any.pkg.tar.xz",
        "pkgs/ttf-font-awesome-4/ttf-font-awesome-4-${environ.FONT_AWESOME_VERSION}-any.pkg.tar.xz",
        "pkgs/ttf-material-design-icons/ttf-material-design-icons-${environ.MATERIAL_DESIGN_VERSION}-any.pkg.tar.xz",
        "pkgs/ttf-unifont/ttf-unifont-${environ.UNIFONT_VERSION}-any.pkg.tar.xz"
    ]

    outputs = [
        "repo/polybar-${environ.POLYBAR_VERSION}-x86_64.pkg.tar.xz",
        "repo/cower-${environ.COWER_VERSION}-x86_64.pkg.tar.xz",
        "repo/pacaur-${environ.PACAUR_VERSION}-any.pkg.tar.xz",
        "repo/termsyn-font-${environ.TERMSYN_VERSION}-any.pkg.tar.xz",
        "repo/ttf-font-awesome-4-${environ.FONT_AWESOME_VERSION}-any.pkg.tar.xz",
        "repo/ttf-material-design-icons-${environ.MATERIAL_DESIGN_VERSION}-any.pkg.tar.xz",
        "repo/ttf-unifont-${environ.UNIFONT_VERSION}-any.pkg.tar.xz",
        "repo/usr.db",
        "repo/usr.db.tar.gz",
        "repo/usr.files",
        "repo/usr.files.tar.gz"
    ]

    shell = <<EOF
rm -rf repo/
mkdir repo/
cp pkgs/**/*.pkg.tar.xz repo/
cd repo/
repo-add usr.db.tar.gz *.pkg.tar.xz
EOF
}

job "release" {
    deps = ["repo"]

    image = "minio/mc:RELEASE.2018-12-27T00-37-49Z"

    inputs = [
        "repo/*.pkg.tar.xz",
        "repo/usr.db",
        "repo/usr.db.tar.gz",
        "repo/usr.files",
        "repo/usr.files.tar.gz"
    ]

    env = {
        "MC_HOSTS_codesink" = "https://${environ.S3_ACCESS_KEY}:${environ.S3_SECRET_KEY}@${environ.S3_ENDPOINT}"
    }

    shell = <<EOF
mc ls codesink/codesink-arch || mc mb codesink/codesink-arch
mc policy download codesink/codesink-arch || :
mc cp --recursive repo/ codesink/codesink-arch/
EOF
}
