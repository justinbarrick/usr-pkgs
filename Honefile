secrets = [
    "S3_ENDPOINT=sfo2.digitaloceanspaces.com",
    "S3_BUCKET=codesink-cache",
    "S3_ENABLED=false",
    "S3_ACCESS_KEY",
    "S3_SECRET_KEY",
    "DOCKER_USER",
    "DOCKER_PASS",
    "GITHUB_TOKEN"
]

env = [
    "VAULT_ADDR",
    "VAULT_TOKEN",
]

vault {
    address = "${env.VAULT_ADDR}"
    token = "${env.VAULT_TOKEN}"
}

cache {
    s3 {
        access_key = "${secrets.S3_ACCESS_KEY}"
        secret_key = "${secrets.S3_SECRET_KEY}"
        endpoint = "${secrets.S3_ENDPOINT}"
        bucket = "${secrets.S3_BUCKET}"
        disabled = "${secrets.S3_ENABLED != "true"}"
    }
}

template "default" {
    deps = ["builder"]

    image = "justinbarrick/arch-builder:builder"

    shell = <<EOF
if [ ! -z "$DEPS" ]; then
    sudo pacman -Sy --force --noconfirm $DEPS
fi

${join(formatList("sudo pacman -U --noconfirm %s", [
    for dep in self.deps:
        pathjoin("../../", jobs[dep].outputs[0])
    if dep != "builder"
]), " && ")}

makepkg -s -f --noconfirm
EOF

    inputs = concat([
        "pkgs/${self.name}/PKGBUILD"
    ], [
        for dep in self.deps:
            jobs[dep].outputs[0]
        if dep != "builder"
    ])

    outputs = [
        "pkgs/${self.name}/${self.name}-${self.env.VERSION}-${self.env.ARCH}.pkg.tar.xz"
    ]

    workdir = "pkgs/${self.name}"
}

template "builder" {
    image = "justinbarrick/arch-builder:builder"
}

job "builder" {
    template = "builder"

    image = "justinbarrick/kaniko:latest"

    env = {
        "DOCKER_USER" = "${secrets.DOCKER_USER}",
        "DOCKER_PASS" = "${secrets.DOCKER_PASS}",
    }

    inputs = ["builder/Dockerfile"]

    shell = <<EOF
kaniko --dockerfile=builder/Dockerfile --context=/build/builder/ \
    --destination=${secrets.DOCKER_USER}/arch-builder:builder
EOF
}

job "polybar" {
    env = {
        "VERSION" = "3.3.0-1"
        "ARCH" = "x86_64"
        "DEPS" = "curl alsa-lib pulseaudio i3-wm jsoncpp"
    }
}

job "cower" {
    env = {
        "VERSION" = "18-1"
        "ARCH" = "x86_64"
    }
}

job "pacaur" {
    deps = ["builder", "cower"]

    env = {
        "VERSION" = "4.7.90-1"
        "ARCH" = "any"
    }
}

job "termsyn-font" {
    inputs = [
        "pkgs/termsyn-font/PKGBUILD",
        "pkgs/termsyn-font/termsyn-font.install",
    ]

    env = {
        "VERSION" = "1.8.7-1"
        "ARCH" = "any"
    }
}

job "ttf-font-awesome-4" {
    inputs = [
        "pkgs/ttf-font-awesome-4/PKGBUILD",
        "pkgs/ttf-font-awesome-4/OFL"
    ]

    env = {
        "VERSION" = "4.7.0-5"
        "ARCH" = "any"
    }
}

job "ttf-material-design-icons" {
    env = {
        "VERSION" = "3.0.1-1"
        "ARCH" = "any"
    }
}

job "ttf-unifont" {
    env = {
        "VERSION" = "11.0.03-1"
        "ARCH" = "any"
    }
}

job "frame" {
    env = {
        "VERSION" = "2.5.0-1"
        "ARCH" = "x86_64"
        "DEPS" = "xorg-server"
    }
}

job "grail" {
    deps = ["builder", "frame"]

    env = {
        "VERSION" = "3.1.1-1"
        "ARCH" = "x86_64"
        "DEPS" = "xorg-server"
    }
}

job "geis" {
    deps = ["builder", "frame", "grail"]

    env = {
        "VERSION" = "2.2.17-2"
        "ARCH" = "x86_64"
        "DEPS" = "xorg-server"
    }
}

job "libreswan" {
    env = {
        "VERSION" = "3.27-1"
        "ARCH" = "x86_64"
    }
}

job "pxz-git" {
    env = {
        "VERSION" = "r56.fcfea93-1"
        "ARCH" = "x86_64"
    }
}

job "python35" {
    env = {
        "VERSION" = "3.5.6-1"
        "ARCH" = "x86_64"
    }
}

job "touchegg" {
    deps = ["builder", "frame", "grail", "geis"]

    env = {
        "VERSION" = "1.1.1-3"
        "ARCH" = "x86_64"
        "DEPS" = "libxtst"
    }
}

job "ppp" {
    env = {
        "VERSION" = "2.4.7-6"
        "ARCH" = "x86_64"
    }

    inputs = [
        "pkgs/ppp/PKGBUILD",
        "pkgs/ppp/CVE-2015-3310.patch",
        "pkgs/ppp/default-route.patch",
        "pkgs/ppp/ip-down",
        "pkgs/ppp/ip-down.d.dns.sh",
        "pkgs/ppp/ip-up",
        "pkgs/ppp/ip-up.d.dns.sh",
        "pkgs/ppp/ipv6-down",
        "pkgs/ppp/ipv6-up",
        "pkgs/ppp/ipv6-up.d.iface-config.sh",
        "pkgs/ppp/LICENSE",
        "pkgs/ppp/options",
        "pkgs/ppp/ppp-2.4.6-makefiles.patch",
        "pkgs/ppp/ppp.systemd",
    ]
}

job "zoom" {
    env = {
        "VERSION" = "2.6.149990.1216-1"
        "ARCH" = "x86_64"
    }
}

job "minidcos" {
    env = {
        "VERSION" = "2019.01.10.0-3"
        "ARCH" = "x86_64"
    }
}

job "repo" {
    template = "builder"

    deps = [
        "polybar", "cower", "pacaur", "termsyn-font", "ttf-font-awesome-4",
        "ttf-material-design-icons", "ttf-unifont", "libreswan", "pxz-git",
        "python35", "touchegg", "ppp", "geis", "grail", "frame", "zoom", "minidcos"
    ]

    inputs = [
        for dep in jobs.repo.deps: jobs[dep].outputs[0]
    ]

    outputs = concat([
        for path in jobs.repo.inputs: pathjoin("repo", basename(path))
    ], [
        "repo/usr.db",
        "repo/usr.db.tar.gz",
        "repo/usr.files",
        "repo/usr.files.tar.gz"
    ])

    shell = <<EOF
rm -rf repo/
mkdir repo/
cp ${join(jobs.repo.inputs, " ")} repo/
cd repo/
repo-add usr.db.tar.gz *.pkg.tar.xz
EOF
}

job "release" {
    template = "builder"

    deps = ["repo"]

    image = "minio/mc:RELEASE.2018-12-27T00-37-49Z"

    inputs = jobs.repo.outputs

    env = {
        "MC_HOSTS_codesink" = "https://${secrets.S3_ACCESS_KEY}:${secrets.S3_SECRET_KEY}@${secrets.S3_ENDPOINT}"
    }

    shell = <<EOF
mc ls codesink/codesink-arch || mc mb codesink/codesink-arch
mc policy download codesink/codesink-arch || :
mc cp ${join(jobs.repo.outputs, " ")} codesink/codesink-arch/
EOF
}
